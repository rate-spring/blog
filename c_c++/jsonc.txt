  今天使用jsonc解析json文件,把数据通过grpc返回.发现诡异的问题: message 中属性值打印失败.gdb 跟踪要么utf8字符串检查报错,要么对象序列化报错.
单把json代码隐去,直接跟输出对象赋值,都很正常.因此怀疑是jsonc导致的.
  查看jsonc解析代码,正常流程:
  1. json_object_from_file  解析文件,获得全局对象,该对象必须调用json_object_put释放内存.

  2. 从全局对象拿数据,使用json_object_object_get_ex,(json_object_object_get 已经不推荐使用),根据注释:
 /** Get the json_object associated with a given object field.  
 *
 * This returns true if the key is found, false in all other cases (including 
 * if obj isn't a json_type_object).
 *
 * *No* reference counts will be changed.  There is no need to manually adjust
 * reference counts through the json_object_put/json_object_get methods unless
 * you need to have the child (value) reference maintain a different lifetime
 * than the owning parent (obj).  Ownership of value is retained by obj.
 *
 * @param obj the json_object instance
 * @param key the object field name
 * @param value a pointer where to store a reference to the json_object 
 *              associated with the given field name.
 *
 *              It is safe to pass a NULL value.
 * @returns whether or not the key exists
 */
extern json_bool json_object_object_get_ex(struct json_object* obj,
						  const char *key,
                                                  struct json_object **value);

     不需要调用 json_object_put释放内存.

  3. 从对象中拿array数据: json_object_array_get_idx. 根据注释:
     https://github.com/json-c/json-c/blob/master/json_object.h
 /**
 * Decrement the reference count of json_object and free if it reaches zero.
 *
 * You must have ownership of obj prior to doing this or you will cause an
 * imbalance in the reference count, leading to a classic use-after-free bug.
 * In particular, you normally do not need to call `json_object_put()` on the
 * json_object returned by `json_object_object_get()` or `json_object_array_get_idx()`.
 *
 * Just like after calling `free()` on a block of memory, you must not use
 * `obj` after calling `json_object_put()` on it or any object that it
 * is a member of (unless you know you've called `json_object_get(obj)` to
 * explicitly increment the refcount).
 *
 * NULL may be passed, which which case this is a no-op.
 *
 * @param obj the json_object instance
 * @returns 1 if the object was freed.
 * @see json_object_get()
 */
JSON_EXPORT int json_object_put(struct json_object *obj);
    不需要调用 json_object_put释放内存.

  4. 从array中的某个对象拿数据,使用json_object_object_get_ex方法.同2.

  遵照以上规则,解析出来的数据使用grpc能够正常输出. 出错的原因应该是多余的json_object_put导致内存释放出问题,影响了grpc返回的对象内存中的数据.




     

