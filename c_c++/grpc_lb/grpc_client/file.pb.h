// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace file {
class FileDownloadBlockReq;
struct FileDownloadBlockReqDefaultTypeInternal;
extern FileDownloadBlockReqDefaultTypeInternal _FileDownloadBlockReq_default_instance_;
class FileDownloadBlockRsp;
struct FileDownloadBlockRspDefaultTypeInternal;
extern FileDownloadBlockRspDefaultTypeInternal _FileDownloadBlockRsp_default_instance_;
class FileDownloadReq;
struct FileDownloadReqDefaultTypeInternal;
extern FileDownloadReqDefaultTypeInternal _FileDownloadReq_default_instance_;
class FileDownloadRsp;
struct FileDownloadRspDefaultTypeInternal;
extern FileDownloadRspDefaultTypeInternal _FileDownloadRsp_default_instance_;
class FileUploadBlockReq;
struct FileUploadBlockReqDefaultTypeInternal;
extern FileUploadBlockReqDefaultTypeInternal _FileUploadBlockReq_default_instance_;
class FileUploadBlockRsp;
struct FileUploadBlockRspDefaultTypeInternal;
extern FileUploadBlockRspDefaultTypeInternal _FileUploadBlockRsp_default_instance_;
class FileUploadBlockRspList;
struct FileUploadBlockRspListDefaultTypeInternal;
extern FileUploadBlockRspListDefaultTypeInternal _FileUploadBlockRspList_default_instance_;
}  // namespace file
PROTOBUF_NAMESPACE_OPEN
template<> ::file::FileDownloadBlockReq* Arena::CreateMaybeMessage<::file::FileDownloadBlockReq>(Arena*);
template<> ::file::FileDownloadBlockRsp* Arena::CreateMaybeMessage<::file::FileDownloadBlockRsp>(Arena*);
template<> ::file::FileDownloadReq* Arena::CreateMaybeMessage<::file::FileDownloadReq>(Arena*);
template<> ::file::FileDownloadRsp* Arena::CreateMaybeMessage<::file::FileDownloadRsp>(Arena*);
template<> ::file::FileUploadBlockReq* Arena::CreateMaybeMessage<::file::FileUploadBlockReq>(Arena*);
template<> ::file::FileUploadBlockRsp* Arena::CreateMaybeMessage<::file::FileUploadBlockRsp>(Arena*);
template<> ::file::FileUploadBlockRspList* Arena::CreateMaybeMessage<::file::FileUploadBlockRspList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace file {

// ===================================================================

class FileUploadBlockReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileUploadBlockReq) */ {
 public:
  inline FileUploadBlockReq() : FileUploadBlockReq(nullptr) {}
  ~FileUploadBlockReq() override;
  explicit constexpr FileUploadBlockReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadBlockReq(const FileUploadBlockReq& from);
  FileUploadBlockReq(FileUploadBlockReq&& from) noexcept
    : FileUploadBlockReq() {
    *this = ::std::move(from);
  }

  inline FileUploadBlockReq& operator=(const FileUploadBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadBlockReq& operator=(FileUploadBlockReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadBlockReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadBlockReq* internal_default_instance() {
    return reinterpret_cast<const FileUploadBlockReq*>(
               &_FileUploadBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileUploadBlockReq& a, FileUploadBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadBlockReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadBlockReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadBlockReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadBlockReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadBlockReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileUploadBlockReq";
  }
  protected:
  explicit FileUploadBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kFidFieldNumber = 2,
    kNameFieldNumber = 3,
    kDataFieldNumber = 11,
    kFsizeFieldNumber = 4,
    kBnumFieldNumber = 5,
    kBsizeFieldNumber = 6,
    kLbsizeFieldNumber = 7,
    kBindexFieldNumber = 8,
    kOffsetFieldNumber = 9,
    kLenFieldNumber = 10,
    kBfinFieldNumber = 12,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rid();
  PROTOBUF_NODISCARD std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string fid = 2;
  void clear_fid();
  const std::string& fid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fid();
  PROTOBUF_NODISCARD std::string* release_fid();
  void set_allocated_fid(std::string* fid);
  private:
  const std::string& _internal_fid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fid(const std::string& value);
  std::string* _internal_mutable_fid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 11;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 fsize = 4;
  void clear_fsize();
  int64_t fsize() const;
  void set_fsize(int64_t value);
  private:
  int64_t _internal_fsize() const;
  void _internal_set_fsize(int64_t value);
  public:

  // int32 bnum = 5;
  void clear_bnum();
  int32_t bnum() const;
  void set_bnum(int32_t value);
  private:
  int32_t _internal_bnum() const;
  void _internal_set_bnum(int32_t value);
  public:

  // int32 bsize = 6;
  void clear_bsize();
  int32_t bsize() const;
  void set_bsize(int32_t value);
  private:
  int32_t _internal_bsize() const;
  void _internal_set_bsize(int32_t value);
  public:

  // int32 lbsize = 7;
  void clear_lbsize();
  int32_t lbsize() const;
  void set_lbsize(int32_t value);
  private:
  int32_t _internal_lbsize() const;
  void _internal_set_lbsize(int32_t value);
  public:

  // int32 bindex = 8;
  void clear_bindex();
  int32_t bindex() const;
  void set_bindex(int32_t value);
  private:
  int32_t _internal_bindex() const;
  void _internal_set_bindex(int32_t value);
  public:

  // int32 offset = 9;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 len = 10;
  void clear_len();
  int32_t len() const;
  void set_len(int32_t value);
  private:
  int32_t _internal_len() const;
  void _internal_set_len(int32_t value);
  public:

  // int32 bfin = 12;
  void clear_bfin();
  int32_t bfin() const;
  void set_bfin(int32_t value);
  private:
  int32_t _internal_bfin() const;
  void _internal_set_bfin(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:file.FileUploadBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int64_t fsize_;
  int32_t bnum_;
  int32_t bsize_;
  int32_t lbsize_;
  int32_t bindex_;
  int32_t offset_;
  int32_t len_;
  int32_t bfin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileUploadBlockRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileUploadBlockRsp) */ {
 public:
  inline FileUploadBlockRsp() : FileUploadBlockRsp(nullptr) {}
  ~FileUploadBlockRsp() override;
  explicit constexpr FileUploadBlockRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadBlockRsp(const FileUploadBlockRsp& from);
  FileUploadBlockRsp(FileUploadBlockRsp&& from) noexcept
    : FileUploadBlockRsp() {
    *this = ::std::move(from);
  }

  inline FileUploadBlockRsp& operator=(const FileUploadBlockRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadBlockRsp& operator=(FileUploadBlockRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadBlockRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadBlockRsp* internal_default_instance() {
    return reinterpret_cast<const FileUploadBlockRsp*>(
               &_FileUploadBlockRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileUploadBlockRsp& a, FileUploadBlockRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadBlockRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadBlockRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadBlockRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadBlockRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadBlockRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadBlockRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadBlockRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileUploadBlockRsp";
  }
  protected:
  explicit FileUploadBlockRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRidFieldNumber = 3,
    kFidFieldNumber = 4,
    kSbidFieldNumber = 8,
    kSfidFieldNumber = 9,
    kCodeFieldNumber = 1,
    kBindexFieldNumber = 5,
    kOffsetFieldNumber = 6,
    kLenFieldNumber = 7,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string rid = 3;
  void clear_rid();
  const std::string& rid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rid();
  PROTOBUF_NODISCARD std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string fid = 4;
  void clear_fid();
  const std::string& fid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fid();
  PROTOBUF_NODISCARD std::string* release_fid();
  void set_allocated_fid(std::string* fid);
  private:
  const std::string& _internal_fid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fid(const std::string& value);
  std::string* _internal_mutable_fid();
  public:

  // string sbid = 8;
  void clear_sbid();
  const std::string& sbid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sbid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sbid();
  PROTOBUF_NODISCARD std::string* release_sbid();
  void set_allocated_sbid(std::string* sbid);
  private:
  const std::string& _internal_sbid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sbid(const std::string& value);
  std::string* _internal_mutable_sbid();
  public:

  // string sfid = 9;
  void clear_sfid();
  const std::string& sfid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sfid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sfid();
  PROTOBUF_NODISCARD std::string* release_sfid();
  void set_allocated_sfid(std::string* sfid);
  private:
  const std::string& _internal_sfid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sfid(const std::string& value);
  std::string* _internal_mutable_sfid();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 bindex = 5;
  void clear_bindex();
  int32_t bindex() const;
  void set_bindex(int32_t value);
  private:
  int32_t _internal_bindex() const;
  void _internal_set_bindex(int32_t value);
  public:

  // int32 offset = 6;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 len = 7;
  void clear_len();
  int32_t len() const;
  void set_len(int32_t value);
  private:
  int32_t _internal_len() const;
  void _internal_set_len(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:file.FileUploadBlockRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sbid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sfid_;
  int32_t code_;
  int32_t bindex_;
  int32_t offset_;
  int32_t len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileUploadBlockRspList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileUploadBlockRspList) */ {
 public:
  inline FileUploadBlockRspList() : FileUploadBlockRspList(nullptr) {}
  ~FileUploadBlockRspList() override;
  explicit constexpr FileUploadBlockRspList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileUploadBlockRspList(const FileUploadBlockRspList& from);
  FileUploadBlockRspList(FileUploadBlockRspList&& from) noexcept
    : FileUploadBlockRspList() {
    *this = ::std::move(from);
  }

  inline FileUploadBlockRspList& operator=(const FileUploadBlockRspList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileUploadBlockRspList& operator=(FileUploadBlockRspList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileUploadBlockRspList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileUploadBlockRspList* internal_default_instance() {
    return reinterpret_cast<const FileUploadBlockRspList*>(
               &_FileUploadBlockRspList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileUploadBlockRspList& a, FileUploadBlockRspList& b) {
    a.Swap(&b);
  }
  inline void Swap(FileUploadBlockRspList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileUploadBlockRspList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileUploadBlockRspList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileUploadBlockRspList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileUploadBlockRspList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileUploadBlockRspList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileUploadBlockRspList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileUploadBlockRspList";
  }
  protected:
  explicit FileUploadBlockRspList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileUploadBlockRspFieldNumber = 1,
  };
  // repeated .file.FileUploadBlockRsp fileUploadBlockRsp = 1;
  int fileuploadblockrsp_size() const;
  private:
  int _internal_fileuploadblockrsp_size() const;
  public:
  void clear_fileuploadblockrsp();
  ::file::FileUploadBlockRsp* mutable_fileuploadblockrsp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file::FileUploadBlockRsp >*
      mutable_fileuploadblockrsp();
  private:
  const ::file::FileUploadBlockRsp& _internal_fileuploadblockrsp(int index) const;
  ::file::FileUploadBlockRsp* _internal_add_fileuploadblockrsp();
  public:
  const ::file::FileUploadBlockRsp& fileuploadblockrsp(int index) const;
  ::file::FileUploadBlockRsp* add_fileuploadblockrsp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file::FileUploadBlockRsp >&
      fileuploadblockrsp() const;

  // @@protoc_insertion_point(class_scope:file.FileUploadBlockRspList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file::FileUploadBlockRsp > fileuploadblockrsp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileDownloadReq) */ {
 public:
  inline FileDownloadReq() : FileDownloadReq(nullptr) {}
  ~FileDownloadReq() override;
  explicit constexpr FileDownloadReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadReq(const FileDownloadReq& from);
  FileDownloadReq(FileDownloadReq&& from) noexcept
    : FileDownloadReq() {
    *this = ::std::move(from);
  }

  inline FileDownloadReq& operator=(const FileDownloadReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadReq& operator=(FileDownloadReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadReq* internal_default_instance() {
    return reinterpret_cast<const FileDownloadReq*>(
               &_FileDownloadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileDownloadReq& a, FileDownloadReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileDownloadReq";
  }
  protected:
  explicit FileDownloadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kSfidFieldNumber = 2,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rid();
  PROTOBUF_NODISCARD std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string sfid = 2;
  void clear_sfid();
  const std::string& sfid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sfid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sfid();
  PROTOBUF_NODISCARD std::string* release_sfid();
  void set_allocated_sfid(std::string* sfid);
  private:
  const std::string& _internal_sfid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sfid(const std::string& value);
  std::string* _internal_mutable_sfid();
  public:

  // @@protoc_insertion_point(class_scope:file.FileDownloadReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sfid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileDownloadRsp) */ {
 public:
  inline FileDownloadRsp() : FileDownloadRsp(nullptr) {}
  ~FileDownloadRsp() override;
  explicit constexpr FileDownloadRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadRsp(const FileDownloadRsp& from);
  FileDownloadRsp(FileDownloadRsp&& from) noexcept
    : FileDownloadRsp() {
    *this = ::std::move(from);
  }

  inline FileDownloadRsp& operator=(const FileDownloadRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadRsp& operator=(FileDownloadRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadRsp* internal_default_instance() {
    return reinterpret_cast<const FileDownloadRsp*>(
               &_FileDownloadRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileDownloadRsp& a, FileDownloadRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileDownloadRsp";
  }
  protected:
  explicit FileDownloadRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kNameFieldNumber = 3,
    kCodeFieldNumber = 1,
    kBnumFieldNumber = 5,
    kSizeFieldNumber = 4,
    kBsizeFieldNumber = 6,
    kLbsizeFieldNumber = 7,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 bnum = 5;
  void clear_bnum();
  int32_t bnum() const;
  void set_bnum(int32_t value);
  private:
  int32_t _internal_bnum() const;
  void _internal_set_bnum(int32_t value);
  public:

  // int64 size = 4;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int32 bsize = 6;
  void clear_bsize();
  int32_t bsize() const;
  void set_bsize(int32_t value);
  private:
  int32_t _internal_bsize() const;
  void _internal_set_bsize(int32_t value);
  public:

  // int32 lbsize = 7;
  void clear_lbsize();
  int32_t lbsize() const;
  void set_lbsize(int32_t value);
  private:
  int32_t _internal_lbsize() const;
  void _internal_set_lbsize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:file.FileDownloadRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t code_;
  int32_t bnum_;
  int64_t size_;
  int32_t bsize_;
  int32_t lbsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadBlockReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileDownloadBlockReq) */ {
 public:
  inline FileDownloadBlockReq() : FileDownloadBlockReq(nullptr) {}
  ~FileDownloadBlockReq() override;
  explicit constexpr FileDownloadBlockReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadBlockReq(const FileDownloadBlockReq& from);
  FileDownloadBlockReq(FileDownloadBlockReq&& from) noexcept
    : FileDownloadBlockReq() {
    *this = ::std::move(from);
  }

  inline FileDownloadBlockReq& operator=(const FileDownloadBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadBlockReq& operator=(FileDownloadBlockReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadBlockReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadBlockReq* internal_default_instance() {
    return reinterpret_cast<const FileDownloadBlockReq*>(
               &_FileDownloadBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileDownloadBlockReq& a, FileDownloadBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadBlockReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadBlockReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadBlockReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadBlockReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadBlockReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadBlockReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileDownloadBlockReq";
  }
  protected:
  explicit FileDownloadBlockReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kSfidFieldNumber = 2,
    kBindexFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rid();
  PROTOBUF_NODISCARD std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string sfid = 2;
  void clear_sfid();
  const std::string& sfid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sfid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sfid();
  PROTOBUF_NODISCARD std::string* release_sfid();
  void set_allocated_sfid(std::string* sfid);
  private:
  const std::string& _internal_sfid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sfid(const std::string& value);
  std::string* _internal_mutable_sfid();
  public:

  // int32 bindex = 3;
  void clear_bindex();
  int32_t bindex() const;
  void set_bindex(int32_t value);
  private:
  int32_t _internal_bindex() const;
  void _internal_set_bindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:file.FileDownloadBlockReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sfid_;
  int32_t bindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileDownloadBlockRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:file.FileDownloadBlockRsp) */ {
 public:
  inline FileDownloadBlockRsp() : FileDownloadBlockRsp(nullptr) {}
  ~FileDownloadBlockRsp() override;
  explicit constexpr FileDownloadBlockRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDownloadBlockRsp(const FileDownloadBlockRsp& from);
  FileDownloadBlockRsp(FileDownloadBlockRsp&& from) noexcept
    : FileDownloadBlockRsp() {
    *this = ::std::move(from);
  }

  inline FileDownloadBlockRsp& operator=(const FileDownloadBlockRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDownloadBlockRsp& operator=(FileDownloadBlockRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDownloadBlockRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDownloadBlockRsp* internal_default_instance() {
    return reinterpret_cast<const FileDownloadBlockRsp*>(
               &_FileDownloadBlockRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FileDownloadBlockRsp& a, FileDownloadBlockRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDownloadBlockRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDownloadBlockRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDownloadBlockRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDownloadBlockRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDownloadBlockRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileDownloadBlockRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDownloadBlockRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "file.FileDownloadBlockRsp";
  }
  protected:
  explicit FileDownloadBlockRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rid();
  PROTOBUF_NODISCARD std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  private:
  const std::string& _internal_rid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:file.FileDownloadBlockRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileUploadBlockReq

// string rid = 1;
inline void FileUploadBlockReq::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& FileUploadBlockReq::rid() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.rid)
  return _internal_rid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockReq::set_rid(ArgT0&& arg0, ArgT... args) {
 
 rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.rid)
}
inline std::string* FileUploadBlockReq::mutable_rid() {
  std::string* _s = _internal_mutable_rid();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockReq.rid)
  return _s;
}
inline const std::string& FileUploadBlockReq::_internal_rid() const {
  return rid_.Get();
}
inline void FileUploadBlockReq::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::release_rid() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockReq.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockReq::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockReq.rid)
}

// string fid = 2;
inline void FileUploadBlockReq::clear_fid() {
  fid_.ClearToEmpty();
}
inline const std::string& FileUploadBlockReq::fid() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.fid)
  return _internal_fid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockReq::set_fid(ArgT0&& arg0, ArgT... args) {
 
 fid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.fid)
}
inline std::string* FileUploadBlockReq::mutable_fid() {
  std::string* _s = _internal_mutable_fid();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockReq.fid)
  return _s;
}
inline const std::string& FileUploadBlockReq::_internal_fid() const {
  return fid_.Get();
}
inline void FileUploadBlockReq::_internal_set_fid(const std::string& value) {
  
  fid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::_internal_mutable_fid() {
  
  return fid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::release_fid() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockReq.fid)
  return fid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockReq::set_allocated_fid(std::string* fid) {
  if (fid != nullptr) {
    
  } else {
    
  }
  fid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockReq.fid)
}

// string name = 3;
inline void FileUploadBlockReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileUploadBlockReq::name() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.name)
}
inline std::string* FileUploadBlockReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockReq.name)
  return _s;
}
inline const std::string& FileUploadBlockReq::_internal_name() const {
  return name_.Get();
}
inline void FileUploadBlockReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::release_name() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockReq.name)
}

// int64 fsize = 4;
inline void FileUploadBlockReq::clear_fsize() {
  fsize_ = int64_t{0};
}
inline int64_t FileUploadBlockReq::_internal_fsize() const {
  return fsize_;
}
inline int64_t FileUploadBlockReq::fsize() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.fsize)
  return _internal_fsize();
}
inline void FileUploadBlockReq::_internal_set_fsize(int64_t value) {
  
  fsize_ = value;
}
inline void FileUploadBlockReq::set_fsize(int64_t value) {
  _internal_set_fsize(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.fsize)
}

// int32 bnum = 5;
inline void FileUploadBlockReq::clear_bnum() {
  bnum_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_bnum() const {
  return bnum_;
}
inline int32_t FileUploadBlockReq::bnum() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.bnum)
  return _internal_bnum();
}
inline void FileUploadBlockReq::_internal_set_bnum(int32_t value) {
  
  bnum_ = value;
}
inline void FileUploadBlockReq::set_bnum(int32_t value) {
  _internal_set_bnum(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.bnum)
}

// int32 bsize = 6;
inline void FileUploadBlockReq::clear_bsize() {
  bsize_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_bsize() const {
  return bsize_;
}
inline int32_t FileUploadBlockReq::bsize() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.bsize)
  return _internal_bsize();
}
inline void FileUploadBlockReq::_internal_set_bsize(int32_t value) {
  
  bsize_ = value;
}
inline void FileUploadBlockReq::set_bsize(int32_t value) {
  _internal_set_bsize(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.bsize)
}

// int32 lbsize = 7;
inline void FileUploadBlockReq::clear_lbsize() {
  lbsize_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_lbsize() const {
  return lbsize_;
}
inline int32_t FileUploadBlockReq::lbsize() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.lbsize)
  return _internal_lbsize();
}
inline void FileUploadBlockReq::_internal_set_lbsize(int32_t value) {
  
  lbsize_ = value;
}
inline void FileUploadBlockReq::set_lbsize(int32_t value) {
  _internal_set_lbsize(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.lbsize)
}

// int32 bindex = 8;
inline void FileUploadBlockReq::clear_bindex() {
  bindex_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_bindex() const {
  return bindex_;
}
inline int32_t FileUploadBlockReq::bindex() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.bindex)
  return _internal_bindex();
}
inline void FileUploadBlockReq::_internal_set_bindex(int32_t value) {
  
  bindex_ = value;
}
inline void FileUploadBlockReq::set_bindex(int32_t value) {
  _internal_set_bindex(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.bindex)
}

// int32 offset = 9;
inline void FileUploadBlockReq::clear_offset() {
  offset_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_offset() const {
  return offset_;
}
inline int32_t FileUploadBlockReq::offset() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.offset)
  return _internal_offset();
}
inline void FileUploadBlockReq::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void FileUploadBlockReq::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.offset)
}

// int32 len = 10;
inline void FileUploadBlockReq::clear_len() {
  len_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_len() const {
  return len_;
}
inline int32_t FileUploadBlockReq::len() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.len)
  return _internal_len();
}
inline void FileUploadBlockReq::_internal_set_len(int32_t value) {
  
  len_ = value;
}
inline void FileUploadBlockReq::set_len(int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.len)
}

// bytes data = 11;
inline void FileUploadBlockReq::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& FileUploadBlockReq::data() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockReq::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.data)
}
inline std::string* FileUploadBlockReq::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockReq.data)
  return _s;
}
inline const std::string& FileUploadBlockReq::_internal_data() const {
  return data_.Get();
}
inline void FileUploadBlockReq::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockReq::release_data() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockReq.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockReq.data)
}

// int32 bfin = 12;
inline void FileUploadBlockReq::clear_bfin() {
  bfin_ = 0;
}
inline int32_t FileUploadBlockReq::_internal_bfin() const {
  return bfin_;
}
inline int32_t FileUploadBlockReq::bfin() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockReq.bfin)
  return _internal_bfin();
}
inline void FileUploadBlockReq::_internal_set_bfin(int32_t value) {
  
  bfin_ = value;
}
inline void FileUploadBlockReq::set_bfin(int32_t value) {
  _internal_set_bfin(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockReq.bfin)
}

// -------------------------------------------------------------------

// FileUploadBlockRsp

// int32 code = 1;
inline void FileUploadBlockRsp::clear_code() {
  code_ = 0;
}
inline int32_t FileUploadBlockRsp::_internal_code() const {
  return code_;
}
inline int32_t FileUploadBlockRsp::code() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.code)
  return _internal_code();
}
inline void FileUploadBlockRsp::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileUploadBlockRsp::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.code)
}

// string msg = 2;
inline void FileUploadBlockRsp::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& FileUploadBlockRsp::msg() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.msg)
}
inline std::string* FileUploadBlockRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockRsp.msg)
  return _s;
}
inline const std::string& FileUploadBlockRsp::_internal_msg() const {
  return msg_.Get();
}
inline void FileUploadBlockRsp::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::release_msg() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockRsp.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockRsp.msg)
}

// string rid = 3;
inline void FileUploadBlockRsp::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& FileUploadBlockRsp::rid() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.rid)
  return _internal_rid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockRsp::set_rid(ArgT0&& arg0, ArgT... args) {
 
 rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.rid)
}
inline std::string* FileUploadBlockRsp::mutable_rid() {
  std::string* _s = _internal_mutable_rid();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockRsp.rid)
  return _s;
}
inline const std::string& FileUploadBlockRsp::_internal_rid() const {
  return rid_.Get();
}
inline void FileUploadBlockRsp::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::release_rid() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockRsp.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockRsp::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockRsp.rid)
}

// string fid = 4;
inline void FileUploadBlockRsp::clear_fid() {
  fid_.ClearToEmpty();
}
inline const std::string& FileUploadBlockRsp::fid() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.fid)
  return _internal_fid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockRsp::set_fid(ArgT0&& arg0, ArgT... args) {
 
 fid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.fid)
}
inline std::string* FileUploadBlockRsp::mutable_fid() {
  std::string* _s = _internal_mutable_fid();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockRsp.fid)
  return _s;
}
inline const std::string& FileUploadBlockRsp::_internal_fid() const {
  return fid_.Get();
}
inline void FileUploadBlockRsp::_internal_set_fid(const std::string& value) {
  
  fid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::_internal_mutable_fid() {
  
  return fid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::release_fid() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockRsp.fid)
  return fid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockRsp::set_allocated_fid(std::string* fid) {
  if (fid != nullptr) {
    
  } else {
    
  }
  fid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockRsp.fid)
}

// int32 bindex = 5;
inline void FileUploadBlockRsp::clear_bindex() {
  bindex_ = 0;
}
inline int32_t FileUploadBlockRsp::_internal_bindex() const {
  return bindex_;
}
inline int32_t FileUploadBlockRsp::bindex() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.bindex)
  return _internal_bindex();
}
inline void FileUploadBlockRsp::_internal_set_bindex(int32_t value) {
  
  bindex_ = value;
}
inline void FileUploadBlockRsp::set_bindex(int32_t value) {
  _internal_set_bindex(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.bindex)
}

// int32 offset = 6;
inline void FileUploadBlockRsp::clear_offset() {
  offset_ = 0;
}
inline int32_t FileUploadBlockRsp::_internal_offset() const {
  return offset_;
}
inline int32_t FileUploadBlockRsp::offset() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.offset)
  return _internal_offset();
}
inline void FileUploadBlockRsp::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void FileUploadBlockRsp::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.offset)
}

// int32 len = 7;
inline void FileUploadBlockRsp::clear_len() {
  len_ = 0;
}
inline int32_t FileUploadBlockRsp::_internal_len() const {
  return len_;
}
inline int32_t FileUploadBlockRsp::len() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.len)
  return _internal_len();
}
inline void FileUploadBlockRsp::_internal_set_len(int32_t value) {
  
  len_ = value;
}
inline void FileUploadBlockRsp::set_len(int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.len)
}

// string sbid = 8;
inline void FileUploadBlockRsp::clear_sbid() {
  sbid_.ClearToEmpty();
}
inline const std::string& FileUploadBlockRsp::sbid() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.sbid)
  return _internal_sbid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockRsp::set_sbid(ArgT0&& arg0, ArgT... args) {
 
 sbid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.sbid)
}
inline std::string* FileUploadBlockRsp::mutable_sbid() {
  std::string* _s = _internal_mutable_sbid();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockRsp.sbid)
  return _s;
}
inline const std::string& FileUploadBlockRsp::_internal_sbid() const {
  return sbid_.Get();
}
inline void FileUploadBlockRsp::_internal_set_sbid(const std::string& value) {
  
  sbid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::_internal_mutable_sbid() {
  
  return sbid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::release_sbid() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockRsp.sbid)
  return sbid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockRsp::set_allocated_sbid(std::string* sbid) {
  if (sbid != nullptr) {
    
  } else {
    
  }
  sbid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sbid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sbid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sbid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockRsp.sbid)
}

// string sfid = 9;
inline void FileUploadBlockRsp::clear_sfid() {
  sfid_.ClearToEmpty();
}
inline const std::string& FileUploadBlockRsp::sfid() const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRsp.sfid)
  return _internal_sfid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileUploadBlockRsp::set_sfid(ArgT0&& arg0, ArgT... args) {
 
 sfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileUploadBlockRsp.sfid)
}
inline std::string* FileUploadBlockRsp::mutable_sfid() {
  std::string* _s = _internal_mutable_sfid();
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockRsp.sfid)
  return _s;
}
inline const std::string& FileUploadBlockRsp::_internal_sfid() const {
  return sfid_.Get();
}
inline void FileUploadBlockRsp::_internal_set_sfid(const std::string& value) {
  
  sfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::_internal_mutable_sfid() {
  
  return sfid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileUploadBlockRsp::release_sfid() {
  // @@protoc_insertion_point(field_release:file.FileUploadBlockRsp.sfid)
  return sfid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileUploadBlockRsp::set_allocated_sfid(std::string* sfid) {
  if (sfid != nullptr) {
    
  } else {
    
  }
  sfid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sfid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sfid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sfid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileUploadBlockRsp.sfid)
}

// -------------------------------------------------------------------

// FileUploadBlockRspList

// repeated .file.FileUploadBlockRsp fileUploadBlockRsp = 1;
inline int FileUploadBlockRspList::_internal_fileuploadblockrsp_size() const {
  return fileuploadblockrsp_.size();
}
inline int FileUploadBlockRspList::fileuploadblockrsp_size() const {
  return _internal_fileuploadblockrsp_size();
}
inline void FileUploadBlockRspList::clear_fileuploadblockrsp() {
  fileuploadblockrsp_.Clear();
}
inline ::file::FileUploadBlockRsp* FileUploadBlockRspList::mutable_fileuploadblockrsp(int index) {
  // @@protoc_insertion_point(field_mutable:file.FileUploadBlockRspList.fileUploadBlockRsp)
  return fileuploadblockrsp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file::FileUploadBlockRsp >*
FileUploadBlockRspList::mutable_fileuploadblockrsp() {
  // @@protoc_insertion_point(field_mutable_list:file.FileUploadBlockRspList.fileUploadBlockRsp)
  return &fileuploadblockrsp_;
}
inline const ::file::FileUploadBlockRsp& FileUploadBlockRspList::_internal_fileuploadblockrsp(int index) const {
  return fileuploadblockrsp_.Get(index);
}
inline const ::file::FileUploadBlockRsp& FileUploadBlockRspList::fileuploadblockrsp(int index) const {
  // @@protoc_insertion_point(field_get:file.FileUploadBlockRspList.fileUploadBlockRsp)
  return _internal_fileuploadblockrsp(index);
}
inline ::file::FileUploadBlockRsp* FileUploadBlockRspList::_internal_add_fileuploadblockrsp() {
  return fileuploadblockrsp_.Add();
}
inline ::file::FileUploadBlockRsp* FileUploadBlockRspList::add_fileuploadblockrsp() {
  ::file::FileUploadBlockRsp* _add = _internal_add_fileuploadblockrsp();
  // @@protoc_insertion_point(field_add:file.FileUploadBlockRspList.fileUploadBlockRsp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::file::FileUploadBlockRsp >&
FileUploadBlockRspList::fileuploadblockrsp() const {
  // @@protoc_insertion_point(field_list:file.FileUploadBlockRspList.fileUploadBlockRsp)
  return fileuploadblockrsp_;
}

// -------------------------------------------------------------------

// FileDownloadReq

// string rid = 1;
inline void FileDownloadReq::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& FileDownloadReq::rid() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadReq.rid)
  return _internal_rid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadReq::set_rid(ArgT0&& arg0, ArgT... args) {
 
 rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadReq.rid)
}
inline std::string* FileDownloadReq::mutable_rid() {
  std::string* _s = _internal_mutable_rid();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadReq.rid)
  return _s;
}
inline const std::string& FileDownloadReq::_internal_rid() const {
  return rid_.Get();
}
inline void FileDownloadReq::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadReq::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadReq::release_rid() {
  // @@protoc_insertion_point(field_release:file.FileDownloadReq.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadReq::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadReq.rid)
}

// string sfid = 2;
inline void FileDownloadReq::clear_sfid() {
  sfid_.ClearToEmpty();
}
inline const std::string& FileDownloadReq::sfid() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadReq.sfid)
  return _internal_sfid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadReq::set_sfid(ArgT0&& arg0, ArgT... args) {
 
 sfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadReq.sfid)
}
inline std::string* FileDownloadReq::mutable_sfid() {
  std::string* _s = _internal_mutable_sfid();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadReq.sfid)
  return _s;
}
inline const std::string& FileDownloadReq::_internal_sfid() const {
  return sfid_.Get();
}
inline void FileDownloadReq::_internal_set_sfid(const std::string& value) {
  
  sfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadReq::_internal_mutable_sfid() {
  
  return sfid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadReq::release_sfid() {
  // @@protoc_insertion_point(field_release:file.FileDownloadReq.sfid)
  return sfid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadReq::set_allocated_sfid(std::string* sfid) {
  if (sfid != nullptr) {
    
  } else {
    
  }
  sfid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sfid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sfid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sfid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadReq.sfid)
}

// -------------------------------------------------------------------

// FileDownloadRsp

// int32 code = 1;
inline void FileDownloadRsp::clear_code() {
  code_ = 0;
}
inline int32_t FileDownloadRsp::_internal_code() const {
  return code_;
}
inline int32_t FileDownloadRsp::code() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.code)
  return _internal_code();
}
inline void FileDownloadRsp::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void FileDownloadRsp::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.code)
}

// string msg = 2;
inline void FileDownloadRsp::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& FileDownloadRsp::msg() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.msg)
}
inline std::string* FileDownloadRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadRsp.msg)
  return _s;
}
inline const std::string& FileDownloadRsp::_internal_msg() const {
  return msg_.Get();
}
inline void FileDownloadRsp::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRsp::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRsp::release_msg() {
  // @@protoc_insertion_point(field_release:file.FileDownloadRsp.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadRsp.msg)
}

// string name = 3;
inline void FileDownloadRsp::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileDownloadRsp::name() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadRsp::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.name)
}
inline std::string* FileDownloadRsp::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadRsp.name)
  return _s;
}
inline const std::string& FileDownloadRsp::_internal_name() const {
  return name_.Get();
}
inline void FileDownloadRsp::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadRsp::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadRsp::release_name() {
  // @@protoc_insertion_point(field_release:file.FileDownloadRsp.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadRsp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadRsp.name)
}

// int64 size = 4;
inline void FileDownloadRsp::clear_size() {
  size_ = int64_t{0};
}
inline int64_t FileDownloadRsp::_internal_size() const {
  return size_;
}
inline int64_t FileDownloadRsp::size() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.size)
  return _internal_size();
}
inline void FileDownloadRsp::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void FileDownloadRsp::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.size)
}

// int32 bnum = 5;
inline void FileDownloadRsp::clear_bnum() {
  bnum_ = 0;
}
inline int32_t FileDownloadRsp::_internal_bnum() const {
  return bnum_;
}
inline int32_t FileDownloadRsp::bnum() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.bnum)
  return _internal_bnum();
}
inline void FileDownloadRsp::_internal_set_bnum(int32_t value) {
  
  bnum_ = value;
}
inline void FileDownloadRsp::set_bnum(int32_t value) {
  _internal_set_bnum(value);
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.bnum)
}

// int32 bsize = 6;
inline void FileDownloadRsp::clear_bsize() {
  bsize_ = 0;
}
inline int32_t FileDownloadRsp::_internal_bsize() const {
  return bsize_;
}
inline int32_t FileDownloadRsp::bsize() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.bsize)
  return _internal_bsize();
}
inline void FileDownloadRsp::_internal_set_bsize(int32_t value) {
  
  bsize_ = value;
}
inline void FileDownloadRsp::set_bsize(int32_t value) {
  _internal_set_bsize(value);
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.bsize)
}

// int32 lbsize = 7;
inline void FileDownloadRsp::clear_lbsize() {
  lbsize_ = 0;
}
inline int32_t FileDownloadRsp::_internal_lbsize() const {
  return lbsize_;
}
inline int32_t FileDownloadRsp::lbsize() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadRsp.lbsize)
  return _internal_lbsize();
}
inline void FileDownloadRsp::_internal_set_lbsize(int32_t value) {
  
  lbsize_ = value;
}
inline void FileDownloadRsp::set_lbsize(int32_t value) {
  _internal_set_lbsize(value);
  // @@protoc_insertion_point(field_set:file.FileDownloadRsp.lbsize)
}

// -------------------------------------------------------------------

// FileDownloadBlockReq

// string rid = 1;
inline void FileDownloadBlockReq::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& FileDownloadBlockReq::rid() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadBlockReq.rid)
  return _internal_rid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadBlockReq::set_rid(ArgT0&& arg0, ArgT... args) {
 
 rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadBlockReq.rid)
}
inline std::string* FileDownloadBlockReq::mutable_rid() {
  std::string* _s = _internal_mutable_rid();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadBlockReq.rid)
  return _s;
}
inline const std::string& FileDownloadBlockReq::_internal_rid() const {
  return rid_.Get();
}
inline void FileDownloadBlockReq::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockReq::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockReq::release_rid() {
  // @@protoc_insertion_point(field_release:file.FileDownloadBlockReq.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadBlockReq::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadBlockReq.rid)
}

// string sfid = 2;
inline void FileDownloadBlockReq::clear_sfid() {
  sfid_.ClearToEmpty();
}
inline const std::string& FileDownloadBlockReq::sfid() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadBlockReq.sfid)
  return _internal_sfid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadBlockReq::set_sfid(ArgT0&& arg0, ArgT... args) {
 
 sfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadBlockReq.sfid)
}
inline std::string* FileDownloadBlockReq::mutable_sfid() {
  std::string* _s = _internal_mutable_sfid();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadBlockReq.sfid)
  return _s;
}
inline const std::string& FileDownloadBlockReq::_internal_sfid() const {
  return sfid_.Get();
}
inline void FileDownloadBlockReq::_internal_set_sfid(const std::string& value) {
  
  sfid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockReq::_internal_mutable_sfid() {
  
  return sfid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockReq::release_sfid() {
  // @@protoc_insertion_point(field_release:file.FileDownloadBlockReq.sfid)
  return sfid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadBlockReq::set_allocated_sfid(std::string* sfid) {
  if (sfid != nullptr) {
    
  } else {
    
  }
  sfid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sfid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sfid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sfid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadBlockReq.sfid)
}

// int32 bindex = 3;
inline void FileDownloadBlockReq::clear_bindex() {
  bindex_ = 0;
}
inline int32_t FileDownloadBlockReq::_internal_bindex() const {
  return bindex_;
}
inline int32_t FileDownloadBlockReq::bindex() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadBlockReq.bindex)
  return _internal_bindex();
}
inline void FileDownloadBlockReq::_internal_set_bindex(int32_t value) {
  
  bindex_ = value;
}
inline void FileDownloadBlockReq::set_bindex(int32_t value) {
  _internal_set_bindex(value);
  // @@protoc_insertion_point(field_set:file.FileDownloadBlockReq.bindex)
}

// -------------------------------------------------------------------

// FileDownloadBlockRsp

// string rid = 1;
inline void FileDownloadBlockRsp::clear_rid() {
  rid_.ClearToEmpty();
}
inline const std::string& FileDownloadBlockRsp::rid() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadBlockRsp.rid)
  return _internal_rid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadBlockRsp::set_rid(ArgT0&& arg0, ArgT... args) {
 
 rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadBlockRsp.rid)
}
inline std::string* FileDownloadBlockRsp::mutable_rid() {
  std::string* _s = _internal_mutable_rid();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadBlockRsp.rid)
  return _s;
}
inline const std::string& FileDownloadBlockRsp::_internal_rid() const {
  return rid_.Get();
}
inline void FileDownloadBlockRsp::_internal_set_rid(const std::string& value) {
  
  rid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockRsp::_internal_mutable_rid() {
  
  return rid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockRsp::release_rid() {
  // @@protoc_insertion_point(field_release:file.FileDownloadBlockRsp.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadBlockRsp::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadBlockRsp.rid)
}

// bytes data = 2;
inline void FileDownloadBlockRsp::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& FileDownloadBlockRsp::data() const {
  // @@protoc_insertion_point(field_get:file.FileDownloadBlockRsp.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDownloadBlockRsp::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:file.FileDownloadBlockRsp.data)
}
inline std::string* FileDownloadBlockRsp::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:file.FileDownloadBlockRsp.data)
  return _s;
}
inline const std::string& FileDownloadBlockRsp::_internal_data() const {
  return data_.Get();
}
inline void FileDownloadBlockRsp::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockRsp::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileDownloadBlockRsp::release_data() {
  // @@protoc_insertion_point(field_release:file.FileDownloadBlockRsp.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileDownloadBlockRsp::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:file.FileDownloadBlockRsp.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
