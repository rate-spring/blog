// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: file.proto
#ifndef GRPC_file_2eproto__INCLUDED
#define GRPC_file_2eproto__INCLUDED

#include "file.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace file {

class FileService final {
 public:
  static constexpr char const* service_full_name() {
    return "file.FileService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 上传文件块 
    std::unique_ptr< ::grpc::ClientWriterInterface< ::file::FileUploadBlockReq>> uploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::file::FileUploadBlockReq>>(uploadBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::file::FileUploadBlockReq>> AsyncuploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::file::FileUploadBlockReq>>(AsyncuploadBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::file::FileUploadBlockReq>> PrepareAsyncuploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::file::FileUploadBlockReq>>(PrepareAsyncuploadBlockRaw(context, response, cq));
    }
    // 下载文件 
    virtual ::grpc::Status download(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::file::FileDownloadRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::file::FileDownloadRsp>> Asyncdownload(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::file::FileDownloadRsp>>(AsyncdownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::file::FileDownloadRsp>> PrepareAsyncdownload(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::file::FileDownloadRsp>>(PrepareAsyncdownloadRaw(context, request, cq));
    }
    // 下载文件块 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::file::FileDownloadBlockRsp>> downloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::file::FileDownloadBlockRsp>>(downloadBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::file::FileDownloadBlockRsp>> AsyncdownloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::file::FileDownloadBlockRsp>>(AsyncdownloadBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::file::FileDownloadBlockRsp>> PrepareAsyncdownloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::file::FileDownloadBlockRsp>>(PrepareAsyncdownloadBlockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 上传文件块 
      virtual void uploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::ClientWriteReactor< ::file::FileUploadBlockReq>* reactor) = 0;
      // 下载文件 
      virtual void download(::grpc::ClientContext* context, const ::file::FileDownloadReq* request, ::file::FileDownloadRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void download(::grpc::ClientContext* context, const ::file::FileDownloadReq* request, ::file::FileDownloadRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 下载文件块 
      virtual void downloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq* request, ::grpc::ClientReadReactor< ::file::FileDownloadBlockRsp>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::file::FileUploadBlockReq>* uploadBlockRaw(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::file::FileUploadBlockReq>* AsyncuploadBlockRaw(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::file::FileUploadBlockReq>* PrepareAsyncuploadBlockRaw(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::file::FileDownloadRsp>* AsyncdownloadRaw(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::file::FileDownloadRsp>* PrepareAsyncdownloadRaw(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::file::FileDownloadBlockRsp>* downloadBlockRaw(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::file::FileDownloadBlockRsp>* AsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::file::FileDownloadBlockRsp>* PrepareAsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::file::FileUploadBlockReq>> uploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::file::FileUploadBlockReq>>(uploadBlockRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::file::FileUploadBlockReq>> AsyncuploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::file::FileUploadBlockReq>>(AsyncuploadBlockRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::file::FileUploadBlockReq>> PrepareAsyncuploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::file::FileUploadBlockReq>>(PrepareAsyncuploadBlockRaw(context, response, cq));
    }
    ::grpc::Status download(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::file::FileDownloadRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::file::FileDownloadRsp>> Asyncdownload(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::file::FileDownloadRsp>>(AsyncdownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::file::FileDownloadRsp>> PrepareAsyncdownload(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::file::FileDownloadRsp>>(PrepareAsyncdownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::file::FileDownloadBlockRsp>> downloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::file::FileDownloadBlockRsp>>(downloadBlockRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::file::FileDownloadBlockRsp>> AsyncdownloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::file::FileDownloadBlockRsp>>(AsyncdownloadBlockRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::file::FileDownloadBlockRsp>> PrepareAsyncdownloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::file::FileDownloadBlockRsp>>(PrepareAsyncdownloadBlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void uploadBlock(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::ClientWriteReactor< ::file::FileUploadBlockReq>* reactor) override;
      void download(::grpc::ClientContext* context, const ::file::FileDownloadReq* request, ::file::FileDownloadRsp* response, std::function<void(::grpc::Status)>) override;
      void download(::grpc::ClientContext* context, const ::file::FileDownloadReq* request, ::file::FileDownloadRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void downloadBlock(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq* request, ::grpc::ClientReadReactor< ::file::FileDownloadBlockRsp>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::file::FileUploadBlockReq>* uploadBlockRaw(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response) override;
    ::grpc::ClientAsyncWriter< ::file::FileUploadBlockReq>* AsyncuploadBlockRaw(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::file::FileUploadBlockReq>* PrepareAsyncuploadBlockRaw(::grpc::ClientContext* context, ::file::FileUploadBlockRspList* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::file::FileDownloadRsp>* AsyncdownloadRaw(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::file::FileDownloadRsp>* PrepareAsyncdownloadRaw(::grpc::ClientContext* context, const ::file::FileDownloadReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::file::FileDownloadBlockRsp>* downloadBlockRaw(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request) override;
    ::grpc::ClientAsyncReader< ::file::FileDownloadBlockRsp>* AsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::file::FileDownloadBlockRsp>* PrepareAsyncdownloadBlockRaw(::grpc::ClientContext* context, const ::file::FileDownloadBlockReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_uploadBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_download_;
    const ::grpc::internal::RpcMethod rpcmethod_downloadBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 上传文件块 
    virtual ::grpc::Status uploadBlock(::grpc::ServerContext* context, ::grpc::ServerReader< ::file::FileUploadBlockReq>* reader, ::file::FileUploadBlockRspList* response);
    // 下载文件 
    virtual ::grpc::Status download(::grpc::ServerContext* context, const ::file::FileDownloadReq* request, ::file::FileDownloadRsp* response);
    // 下载文件块 
    virtual ::grpc::Status downloadBlock(::grpc::ServerContext* context, const ::file::FileDownloadBlockReq* request, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_uploadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_uploadBlock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_uploadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::file::FileUploadBlockReq>* /*reader*/, ::file::FileUploadBlockRspList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::file::FileUploadBlockRspList, ::file::FileUploadBlockReq>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_download() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdownload(::grpc::ServerContext* context, ::file::FileDownloadReq* request, ::grpc::ServerAsyncResponseWriter< ::file::FileDownloadRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_downloadBlock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadBlock(::grpc::ServerContext* context, ::file::FileDownloadBlockReq* request, ::grpc::ServerAsyncWriter< ::file::FileDownloadBlockRsp>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_uploadBlock<WithAsyncMethod_download<WithAsyncMethod_downloadBlock<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_uploadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_uploadBlock() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::file::FileUploadBlockReq, ::file::FileUploadBlockRspList>(
            [this](
                   ::grpc::CallbackServerContext* context, ::file::FileUploadBlockRspList* response) { return this->uploadBlock(context, response); }));
    }
    ~WithCallbackMethod_uploadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::file::FileUploadBlockReq>* /*reader*/, ::file::FileUploadBlockRspList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::file::FileUploadBlockReq>* uploadBlock(
      ::grpc::CallbackServerContext* /*context*/, ::file::FileUploadBlockRspList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_download() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::file::FileDownloadReq, ::file::FileDownloadRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::file::FileDownloadReq* request, ::file::FileDownloadRsp* response) { return this->download(context, request, response); }));}
    void SetMessageAllocatorFor_download(
        ::grpc::MessageAllocator< ::file::FileDownloadReq, ::file::FileDownloadRsp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::file::FileDownloadReq, ::file::FileDownloadRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* download(
      ::grpc::CallbackServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_downloadBlock() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::file::FileDownloadBlockReq, ::file::FileDownloadBlockRsp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::file::FileDownloadBlockReq* request) { return this->downloadBlock(context, request); }));
    }
    ~WithCallbackMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::file::FileDownloadBlockRsp>* downloadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_uploadBlock<WithCallbackMethod_download<WithCallbackMethod_downloadBlock<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_uploadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_uploadBlock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_uploadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::file::FileUploadBlockReq>* /*reader*/, ::file::FileUploadBlockRspList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_download() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_downloadBlock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_uploadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_uploadBlock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_uploadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::file::FileUploadBlockReq>* /*reader*/, ::file::FileUploadBlockRspList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadBlock(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_download() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_downloadBlock() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_uploadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_uploadBlock() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->uploadBlock(context, response); }));
    }
    ~WithRawCallbackMethod_uploadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadBlock(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::file::FileUploadBlockReq>* /*reader*/, ::file::FileUploadBlockRspList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* uploadBlock(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_download() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->download(context, request, response); }));
    }
    ~WithRawCallbackMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* download(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_downloadBlock() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->downloadBlock(context, request); }));
    }
    ~WithRawCallbackMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* downloadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_download : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_download() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::file::FileDownloadReq, ::file::FileDownloadRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::file::FileDownloadReq, ::file::FileDownloadRsp>* streamer) {
                       return this->Streameddownload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_download() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status download(::grpc::ServerContext* /*context*/, const ::file::FileDownloadReq* /*request*/, ::file::FileDownloadRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddownload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::file::FileDownloadReq,::file::FileDownloadRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_download<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_downloadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_downloadBlock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::file::FileDownloadBlockReq, ::file::FileDownloadBlockRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::file::FileDownloadBlockReq, ::file::FileDownloadBlockRsp>* streamer) {
                       return this->StreameddownloadBlock(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_downloadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status downloadBlock(::grpc::ServerContext* /*context*/, const ::file::FileDownloadBlockReq* /*request*/, ::grpc::ServerWriter< ::file::FileDownloadBlockRsp>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreameddownloadBlock(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::file::FileDownloadBlockReq,::file::FileDownloadBlockRsp>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_downloadBlock<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_download<WithSplitStreamingMethod_downloadBlock<Service > > StreamedService;
};

}  // namespace file


#endif  // GRPC_file_2eproto__INCLUDED
